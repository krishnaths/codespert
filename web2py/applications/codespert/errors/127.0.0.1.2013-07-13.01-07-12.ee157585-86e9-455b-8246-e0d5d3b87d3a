(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> invalid literal for long() with base 10: 'book.png'"
p3
sS'layer'
p4
S'/home/krishnath/codespert/web2py/applications/codespert/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\nfrom Tkinter import *\nimport tkMessageBox\nimport logging\n\n@auth.requires_login()\ndef insertanswer():\n    \n    #qid = request.args(0)\n    #answer = request.args(1)\n    #byid = auth.user.id\n    \n    #db.Answer.insert(qid=qid,answer=answer,byid=byid)\n    \n    try:\n        #tkMessageBox.showinfo("hiads"+request.body.read())\n        ans = request.body.read()\n        tkMessageBox.showinfo("inside post"+ans)        \n        ans = ans.replace(\'/([^>\\r\\n]?)(\\r\\n|\\n\\r|\\r|\\n)/g\', \'<br />\')\n            \n        ret = db.Answer.insert(qid=request.args(0),answer=ans,byid=auth.user.id)\n        if ret >=1 :\n            response.flash = "created post"\n            return True\n        else:\n            response.flash = "An error occured while creating the post"\n            return False\n            \n    except ValueError:\n            pass\n    return True\n\n@auth.requires_login()\ndef answer():\n    \n    qstion = db(db.UsrQst.id == request.args(0)).select(db.UsrQst.question)\n    quest = ""\n    for qst in qstion:\n\t#tkMessageBox.showinfo("hi"+qst.question)\n\tquest = qst.question\n    answers = db(db.Answer.qid == request.args(0)).select(db.Answer.answer)\n    answerers = db(db.Answer.qid == request.args(0))(db.Answer.byid == db.auth_user.id).select(db.Answer.answer,db.auth_user.first_name) \n    codes = db(db.Codes.qid == request.args(0)).select(db.Codes.Code)\n    script=""\n    qst=[]\n    for code in codes:\n\tscript = code.Code\n    #tkMessageBox.showinfo(codes)\n\n    for answer in answers:\n\t#tkMessageBox.showinfo(answer)\n\n\tpass\n\n    form=FORM(TEXTAREA(_id="txtAnswers",_placeholder="Your solution here",_name="txtAns",requires=IS_NOT_EMPTY()),BR(),INPUT(_type="submit",_id="btnsubmit",_value="Post"))\n    form[\'_id\'] = "frmAnswer"\n    \n    if form.accepts(request,session):\n\ttry:\n            tkMessageBox.showinfo("inside post")        \n            valText = form.vars.txtAns.replace(\'/([^>\\r\\n]?)(\\r\\n|\\n\\r|\\r|\\n)/g\', \'<br />\')\n            \n            ret = db.Answer.insert(qid=request.args(0),answer=valText,byid=auth.user.id)\n            if ret >=1 :\n                response.flash = "An error occured while creating the post"\n                return True\n                pass\n            else:\n                response.flash = "An error occured while creating the post"\n                return False\n            \n        except ValueError:\n            pass\n        \n\t   \n\t\n    if qst ==  "":\n        return dict(qstion="")\n    else:\n        return dict(usrnm=auth.user.first_name.lower(),qid=request.args(0),qstion=quest,code=script,answers=answers,answerers=answerers,form=form)\n\ndef home():\n    return dict()\n\n@auth.requires_login()\ndef listqs():\n    #quests = db(db.UsrQst.usrid == 1).select(db.UsrQst.ALL)\n    quests = db().select(db.UsrQst.ALL)\n    questions = []\n    qids = []\n    for qst in quests:\n        questions.append(qst.question)\n\tqids.append(qst.id)\n    #return dict(quests = questions,qids=qids)\n    return dict(quests=quests)\n     \n@auth.requires_login()\ndef trainings():\n    if request.args(0) == \'\' or request.args(0) == \'None\':\n\treturn dict(message=\'python\')\n    else :\n\n\treturn dict(message=request.args(0))\n\n@auth.requires_login()\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simple replace the two lines below with:\n    return auth.wiki()\n    """\n    response.flash = T("Welcome to web2py!")\n    return dict(message=T(\'Hello World\'))\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in \n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs must be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud())\n\nresponse._vars=response._caller(answer)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/krishnath/codespert/web2py/gluon/restricted.py", line 212, in restricted\n    exec ccode in environment\n  File "/home/krishnath/codespert/web2py/applications/codespert/controllers/default.py", line 180, in <module>\n  File "/home/krishnath/codespert/web2py/gluon/globals.py", line 194, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/krishnath/codespert/web2py/gluon/tools.py", line 3022, in f\n    return action(*a, **b)\n  File "/home/krishnath/codespert/web2py/applications/codespert/controllers/default.py", line 45, in answer\n    qstion = db(db.UsrQst.id == request.args(0)).select(db.UsrQst.question)\n  File "/home/krishnath/codespert/web2py/gluon/dal.py", line 9958, in select\n    return adapter.select(self.query,fields,attributes)\n  File "/home/krishnath/codespert/web2py/gluon/dal.py", line 2245, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "/home/krishnath/codespert/web2py/gluon/dal.py", line 1691, in select\n    sql = self._select(query, fields, attributes)\n  File "/home/krishnath/codespert/web2py/gluon/dal.py", line 1601, in _select\n    sql_w = \' WHERE \' + self.expand(query) if query else \'\'\n  File "/home/krishnath/codespert/web2py/gluon/dal.py", line 1366, in expand\n    return op(first, second, **optional_args)\n  File "/home/krishnath/codespert/web2py/gluon/dal.py", line 1276, in EQ\n    self.expand(second, first.type))\n  File "/home/krishnath/codespert/web2py/gluon/dal.py", line 1376, in expand\n    return str(self.represent(expression,field_type))\n  File "/home/krishnath/codespert/web2py/gluon/dal.py", line 1822, in represent\n    return str(long(obj))\nValueError: invalid literal for long() with base 10: \'book.png\'\n'
p11
s.